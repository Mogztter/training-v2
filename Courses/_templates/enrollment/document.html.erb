<script>
  window.trainingClassName = "<%= attr 'module-id' %>"
  window.siteUrl = window.location
</script>
<script src="//js.maxmind.com/js/apis/geoip2/v2.1/geoip2.js" type="text/javascript"></script>
<script src="//cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
<script src="//neo4jsandbox.com/js/jwt-decode.min.js"></script>
<script src="//cdn.auth0.com/js/lock/11.23.0/lock.min.js"></script>
<script src="<%= attr('module-class-js-url') %>" type="text/javascript"></script>
<script>
  var auth0Options = {
    configurationBaseUrl: 'https://cdn.auth0.com',
    allowedConnections: ['google-oauth2', 'linkedin', 'twitter', 'Username-Password-Authentication'],
    additionalSignUpFields: [
      {
        name: 'first_name',
        placeholder: 'First Name'
      },
      {
        name: 'last_name',
        placeholder: 'Last Name'
      }
    ],
    closable: false,
    languageDictionary: {
      signUpTerms: "I agree to the <a href='https://neo4j.com/terms/online-trial-agreement/' style='text-decoration: underline' target='_blank'>terms of service</a> of Neo4j."
    },
    mustAcceptTerms: true,
    auth: {
      redirect: true,
      redirectUrl: 'https://neo4j.com/accounts/login',
      responseType: 'token id_token',
      audience: 'neo4j://accountinfo/',
      params: {
        scope: 'read:account-info write:account-info openid email profile user_metadata'
      }
    }
  }

  const classStates = {
    loggedIn: 'graph-academy-for-logged-in',
    notLoggedIn: 'graph-academy-for-not-logged-in'
  }

  class GraphAcademyLogin {
    constructor(options = {}) {
      console.log('constructor called');
      if (!Auth0Lock || typeof Auth0Lock !== 'function') return;
      console.log(options);
      this.lock = new Auth0Lock('DxhmiF8TCeznI7Xoi08UyYScLGZnk4ke', 'login.neo4j.com', auth0Options);
      this.options = options;
      this.checkSession(options.callback);
    }

    checkSession(cb) {
      this.lock.checkSession({}, async (err, result) => {
        console.log(result);
        if (result) {
          this.isLoggedIn = true;
          this.authResult = result;
          if (this.callback && typeof this.callback === 'function') this.callback()
        } else {
          this.isLoggedIn = false;
        }
        if (err && this.options.loginRedirectUrl) {
          this.redirectToLogin();
        }
        this.handleHtmlOnState(result ? 'loggedIn' : 'notLoggedIn');
        if (cb && typeof cb === 'function') cb(err, result);
      })
    }

    handleHtmlOnState(state = null) {
      const loggedInElements = document.getElementsByClassName(classStates['loggedIn']) || [];
      const notLoggedInElements = document.getElementsByClassName(classStates['notLoggedIn']) || [];
      if (state === 'loggedIn') {
        for (let item of loggedInElements) {
          item.style.display = 'inherit';
        }
        for (let item of notLoggedInElements) {
          item.style.display = 'none';
        }
      } else if (state === 'notLoggedIn') {
        for (let item of loggedInElements) {
          item.style.display = 'none';
        }
        for (let item of notLoggedInElements) {
          item.style.display = 'inherit';
        }
      }
    }

    logout() {
      const logoutOptions = {};
      if (this.options.redirectOnLogout) logoutOptions.redirectTo = this.options.redirectOnLogout;
      this.lock.logout(logoutOptions);
      this.handleHtmlOnState('notLoggedIn');
    }

    redirectToLogin() {
      return window.location.href = this.options.loginRedirectUrl;
    }
  }
</script>
<script type="text/javascript">
  var country = null;
  var state = null;

  var geoOnSuccess = function (geoipResponse) {
    country = geoipResponse.country.names.en;
    if (geoipResponse.subdivisions.length > 0) {
      // state = geoipResponse.subdivisions[0].iso_code;
      state = geoipResponse.subdivisions[0].names.en;
    }
  }
  var geoOnError = function (error) {
    console.log(error);
  }
  geoip2.city(geoOnSuccess, geoOnError);
</script>
<script type="text/javascript">

  $(document).ready(function () {
    const login = new GraphAcademyLogin({});
    login.checkSession((err, result) => {
      if (result) {
        const givenName = result.idTokenPayload.given_name || null
        getEnrollmentForClass().done(function (data, textStatus, jqXHR) {
          if (data['enrolled']) {
            if (givenName) {
              $(".custom-form-header").html("<p>Welcome " + result.idTokenPayload.given_name + "</p>");
            } else {
              $(".custom-form-header").html("<p>Welcome</p>");
            }
            $('.btn-login').replaceWith($('.btn-continue'));
            $('.reg-logout').show();
          } else {
            $('#online_training').remove();
            $(".small-2").addClass("medium-offset-4");
            $('#reg-form').show();
            $('#reg-start').hide();
            $('#logout').show();
            $('.reg-logout').show();

            MktoForms2.whenReady(function (form) {
              var prefillFields = {
                "FirstName": userInfo.given_name,
                "LastName": userInfo.family_name,
                "Email": userInfo.email,
                "Country": country
              };
              if (country == "United States" || country == "Canada") {
                prefillFields["State"] = state;
              }
              //pass our prefillFields objects into the form.vals method to fill our fields
              form.vals(prefillFields);
            });
          }

        });
      } else {
        // Do whatever if not logged in
      }
    })
  });
</script>
<script type="text/javascript">
  var logout = function () {
    record_event('training', "<%= attr 'module-logout-event' %>");
    window.location = "https://neo4j.com/accounts/logout/?targetUrl=" + window.siteUrl;
  }
  var loginButtonAction = function (e) {
    record_event('training', "<%= attr 'module-login-event' %>");
    window.location = "https://neo4j.com/accounts/login-b/?targetUrl=" + window.siteUrl;
  }
  var gcSendEvent = function (component, eventText, eventDetail) {
    try {
      if (typeof ga === 'function' && typeof ga.getAll === 'function' && typeof (ga.getAll()) === 'object' && ga.getAll().hasOwnProperty('length') && ga.getAll().length > 0) {
        var tracker = ga.getAll()[0].get('name');
        if (tracker) {
          ga(tracker + '.send', 'event', { 'eventCategory': component, 'eventAction': eventText, 'eventLabel': eventDetail });
          console.log("GA sent event.");
        } else {
          setTimeout(function () {
            gcSendEvent(component, eventText, eventDetail)
          }, 1000);
        }
      } else {
        console.log("No GA. Setting timeout.");
        setTimeout(function () {
          gcSendEvent(component, eventText, eventDetail)
        }, 750);
      }
    } catch (error) {
      console.error(error);
    }
  }

  $(document).ready(function () {
    $('.btn-login').click(function (e) {
      loginButtonAction(e);
    });
    $('.btn-continue').click(function (e) {
      window.location = window.siteUrl + 'part-0/';
    });
  });

  var record_event = function (component, eventText, eventDetail) {
    if (eventDetail == null) {
      eventDetail = "";
    }
    gcSendEvent('send', component, eventText, eventDetail);
    Intercom('trackEvent', component + '-' + eventText, { "detail": eventDetail });
  }
</script>
<style>
  .custom-form-header {
    background: #0f5788;
    padding: 15px 50px;
    text-align: center;
  }

  .custom-form-header p {
    color: white;
    margin-bottom: 0;
  }

  .custom-form {
    background: #ddddde;
    padding: 30px 20px 25px 25px;
  }

  .subhead-training {
    font-size: 26px;
  }

  .mktoForm input[type=url], .mktoForm input[type=text], .mktoForm input[type=date], .mktoForm input[type=tel], .mktoForm input[type=email], .mktoForm input[type=number], .mktoForm textarea.mktoField, .mktoForm select.mktoField {
    background-color: #fdfdfd;
  }
  .asciidoc .sect1 > h2 {
      letter-spacing: -.03em;
      font-size: 1.25rem;
      line-height: 1.4;
      margin-top: 0;
      margin-bottom: .25rem;
      font-weight: 700;
  }
  @media print, screen and (min-width: 40em) {
    .asciidoc .sect1 > h2 {
      font-size: 1.25rem;
    }
  }
  #preamble {
    margin-bottom: 2rem;
  }
  .asciidoc .ulist > ul > li > p {
    margin-bottom: 0;
  }
</style>
<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "Course",
    "name": "<%= attr 'module-title' %>",
    "description": "<%= attr 'doctitle' %>",
    "provider": {
      "@type": "Organization",
      "name": "Neo4j, Inc.",
      "sameAs": "https://neo4j.com"
    }
  }
</script>

<div id="logout" style="display: none; position: absolute; right: 50px; top: 50px;">
  <a data-action="logout" href="#" class="medium button feature-box_button">Logout</a>
</div>

<div class="row">
  <div class="medium-12 columns text-center">
    <h2 class="subhead-training"><%= attr 'doctitle' %></h2>
  </div>
</div>
<div class="row">
  <div class="small-10 medium-6 columns mainpage course_box asciidoc" id="online_training">
    <%= content %>
  </div>
  <div class="small-2 medium-4 columns" style="padding-top: 30px; min-width: 350px;">
    <div class="custom-form-header">
      <p>Enroll in Course</p>
    </div>
    <div class="custom-form" style="text-align: center" id="reg-start">
      <button type="button" class="btn btn-success btn-login" style="vertical-align: middle;">Sign In</button>
      <a href="#" data-action="logout" style="display: none" class="reg-logout">Logout</a>
    </div>
    <div class="custom-form" style="text-align: center; display: none" id="reg-continue">
      <button type="button" class="btn btn-success btn-continue" style="vertical-align: middle;">Continue to the Course</button>
    </div>
    <div class="custom-form" style="display: none" id="reg-form">
      <script src="//go.neo4j.com/js/forms2/js/forms2.min.js"></script>
      <form id="mktoForm_1422"></form>
      <script>
        if (typeof MktoForms2 !== 'undefined')  {
          MktoForms2.loadForm("//go.neo4j.com", "710-RRC-335", 1422, function (form) {
            $('button[type=submit]').text('Enroll in Course');
            $('#LastName').parent().append("<p><i>Name above used to generate Certificate<br />of Completion</i></p>");
            $("#mktoForm_1422").css("width", "260px");
            $(".mktoLogicalField.mktoCheckboxList.mktoHasWidth").css("width", "280px");
            $("select#Country").change(function () {
              $(".mktoLogicalField.mktoCheckboxList.mktoHasWidth").css("width", "280px");
            });

            //Add an onSuccess handler
            form.onSuccess(function (values, followUpUrl) {
              enrollStudentInClass(values['FirstName'], values['LastName']).done(function () {
                record_event('training', "<%= attr 'module-register-event' %>");
                gcSendEvent('online_training', 'register', "<%= attr 'module-register-event-detail' %>");
                window.location = window.siteUrl + 'part-0/';
              });
              return false;
            });
          });
        } else {
          $("#reg-form").html("<p style='font-size:17px; text-align:center; color:red;'>Sorry, something has gone wrong. Some browser features like Firefox's Enhanced Tracking Protection prevent the training from working properly. Please try a different browser or turn of ETP.</p>");
        }
      </script>
    </div>
  </div>
</div>
<section>&nbsp;</section>
<script>
  $(document).ready(function () {
    const login = new GraphAcademyLogin({ loginRedirectUrl: "https://neo4j.com/accounts/login-b/?targetUrl=" + window.siteUrl });
    login.checkSession((err, result) => {
      if (result) {
        var userInfoIntercom = result.idTokenPayload;
        if (userInfoIntercom) {
          try {
            window.Intercom("update", {
              app_id: "dt0ig5ab",
              name: userInfoIntercom.name,
              email: userInfoIntercom.email,
              user_id: userInfoIntercom.sub,
              hide_default_launcher: true
            });
          } catch (err) {
            console.error(err);
          }
        }
        Intercom('trackEvent', "<%= attr 'module-intercom-event' %>");
      }
    })

  });
</script>
<script>
  window.intercomSettings = {
    app_id: "dt0ig5ab",
    hide_default_launcher: true
  };
</script>
<script>(function () {
  var w = window;
  var ic = w.Intercom;
  if (typeof ic === "function") {
    ic('reattach_activator');
    ic('update', intercomSettings);
  } else {
    var d = document;
    var i = function () {
      i.c(arguments)
    };
    i.q = [];
    i.c = function (args) {
      i.q.push(args)
    };
    w.Intercom = i;

    function l() {
      var s = d.createElement('script');
      s.type = 'text/javascript';
      s.async = true;
      s.src = 'https://widget.intercom.io/widget/dt0ig5ab';
      var x = d.getElementsByTagName('script')[0];
      x.parentNode.insertBefore(s, x);
    }

    if (w.attachEvent) {
      w.attachEvent('onload', l);
    } else {
      w.addEventListener('load', l, false);
    }
  }
})()</script>
